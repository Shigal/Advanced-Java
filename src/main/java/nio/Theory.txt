NIO - Non-blocking Input Output

- as we already have IO package in java why we need nio
the reason is nio provides the multithreading capability to IO

- basically we don't want to block the thread while it reads a file or writes to a file

- Normally the thread gets locked when we are reading a file or writing to a file until
the it done writing or reading
and nio provides an improvement over that

- when we read a file it happens from the channel into the buffer

- when we write to a file it happens from the buffer to the channel

- whenever we want to read, we will have to first open a channel, create a buffer
and then we can read from the channel into the buffer

- buffer is a container for the data
- channel is kind of pipeline / connection

-----------------------------------------------------------------------------------

- thread waiting is expensive even if it doesn't consume any CPU time but it utilizes
about 2Mb of memory for stack variables, local storage and etc.

- IO is Stream oriented blocking IO
- NIO is buffer oriented non-blocking IO

- Java IO stream oriented means it reads one byte at a time from a stream
The bytes you read are not cached, so can move back and forth with data from the stream
To move back and forth the data, we need to cache is firsthand, there comes the buffer

- Java NIO buffer oriented as data is read into the buffer from which it is processed later

- channel represents a connection between the data source and the java program for
data transfer

- stream oriented IO, we write directly to or read directly from the stream object

- In NIO, data is read into Buffer and written into buffer

- Blocking IO wait for the data to be write or read before returning

- Non blocking IO does not wait for the data to be read or write before returning

